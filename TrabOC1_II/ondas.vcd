$date
	Tue Jun 12 22:10:17 2018
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module Teste_Bench $end
$var reg 1 ! clk $end
$scope module mips_main $end
$var wire 1 ! clock $end
$var wire 1 " zero $end
$var wire 4 # saida_alu_control [3:0] $end
$var wire 5 $ register_write [4:0] $end
$var wire 32 % proximo_endereco [31:0] $end
$var wire 32 & instrucao [31:0] $end
$var wire 32 ' endereco_pc [31:0] $end
$var wire 32 ( endereco32 [31:0] $end
$var wire 32 ) end_deslocado [31:0] $end
$var wire 32 * desvio_saida [31:0] $end
$var wire 32 + alu_resultado [31:0] $end
$var wire 32 , Write_Data [31:0] $end
$var wire 1 - WriteReg $end
$var wire 1 . WriteMem $end
$var wire 32 / Valor_Reg2 [31:0] $end
$var wire 32 0 Valor_Reg1 [31:0] $end
$var wire 5 1 Shamt [4:0] $end
$var wire 5 2 Register_rt [4:0] $end
$var wire 5 3 Register_rs [4:0] $end
$var wire 5 4 Register_rd [4:0] $end
$var wire 1 5 RegDst $end
$var wire 32 6 Read_data02 [31:0] $end
$var wire 1 7 ReadMem $end
$var wire 1 8 OrigALU $end
$var wire 6 9 Op_code [5:0] $end
$var wire 2 : Op_ALU [1:0] $end
$var wire 32 ; NewInput_Pc [31:0] $end
$var wire 1 < MemtoReg $end
$var wire 6 = Funct [5:0] $end
$var wire 32 > Exit_DataMem [31:0] $end
$var wire 1 ? Exit_AND $end
$var wire 16 @ Endereco [15:0] $end
$var wire 1 A Branch $end
$scope module Inst_Controle $end
$var wire 6 B Op_code [5:0] $end
$var reg 1 A Branch $end
$var reg 1 < MemtoReg $end
$var reg 2 C Op_ALU [1:0] $end
$var reg 1 8 OrigALU $end
$var reg 1 7 ReadMem $end
$var reg 1 5 RegDst $end
$var reg 1 . WriteMem $end
$var reg 1 - WriteReg $end
$upscope $end
$scope module ins_mux_instrucao $end
$var wire 1 5 RegDst $end
$var wire 5 D register_rt [4:0] $end
$var wire 5 E register_rd [4:0] $end
$var reg 5 F register_write [4:0] $end
$upscope $end
$scope module inst_alu $end
$var wire 32 G saida_mux_registrador [31:0] $end
$var wire 4 H saida_alu_control [3:0] $end
$var wire 32 I data1 [31:0] $end
$var reg 32 J alu_resultado [31:0] $end
$var reg 1 " zero $end
$upscope $end
$scope module inst_banco_registrador $end
$var wire 5 K Numero_Reg_Escrita [4:0] $end
$var wire 1 - RegWrite $end
$var wire 1 ! clk $end
$var wire 5 L Numero_Reg2 [4:0] $end
$var wire 5 M Numero_Reg1 [4:0] $end
$var wire 32 N Dado_escrita [31:0] $end
$var reg 32 O Valor_Reg1 [31:0] $end
$var reg 32 P Valor_Reg2 [31:0] $end
$upscope $end
$scope module inst_controle_ALU $end
$var wire 2 Q Op_ALU [1:0] $end
$var wire 16 R Campo_16_Bits [15:0] $end
$var reg 4 S saida_alu_control [3:0] $end
$upscope $end
$scope module inst_deslocamento $end
$var wire 32 T endereco [31:0] $end
$var reg 32 U end_deslocado [31:0] $end
$upscope $end
$scope module inst_extensor $end
$var wire 16 V endereco16 [15:0] $end
$var reg 32 W endereco32 [31:0] $end
$upscope $end
$scope module inst_memoria_de_dados $end
$var wire 1 7 ReadMem $end
$var wire 1 . WriteMem $end
$var wire 1 ! clk $end
$var wire 32 X result_ALU [31:0] $end
$var reg 32 Y Exit_DataMem [31:0] $end
$upscope $end
$scope module inst_memoria_de_instrucao $end
$var wire 32 Z endereco [31:0] $end
$var reg 32 [ instrucao [31:0] $end
$upscope $end
$scope module inst_monta_instrucao $end
$var wire 32 \ instrucao [31:0] $end
$var wire 5 ] Shamt [4:0] $end
$var wire 5 ^ Register_rt [4:0] $end
$var wire 5 _ Register_rs [4:0] $end
$var wire 5 ` Register_rd [4:0] $end
$var wire 6 a Op_code [5:0] $end
$var wire 6 b Funct [5:0] $end
$var wire 16 c Endereco [15:0] $end
$upscope $end
$scope module inst_mux_ALU $end
$var wire 1 8 ALUSrc $end
$var wire 32 d endereco_32bits [31:0] $end
$var wire 32 e register_rd [31:0] $end
$var reg 32 f Read_data02 [31:0] $end
$upscope $end
$scope module inst_mux_and $end
$var wire 1 A Branch $end
$var wire 1 ? Exit_AND $end
$var wire 1 " Reg_Zero $end
$upscope $end
$scope module inst_mux_desvio $end
$var wire 1 ? Result_AND $end
$var wire 32 g Exit_ALU_Pc [31:0] $end
$var wire 32 h Exit_ALU_Desvio [31:0] $end
$var reg 32 i NewInput_Pc [31:0] $end
$upscope $end
$scope module inst_mux_memoria_dados $end
$var wire 32 j Exit_DataMem [31:0] $end
$var wire 1 < MemtoReg $end
$var wire 32 k ResultadoF_ALU [31:0] $end
$var reg 32 l Write_Data [31:0] $end
$upscope $end
$scope module inst_pc $end
$var wire 1 ! clk $end
$var wire 32 m prox_endereco [31:0] $end
$var reg 32 n endereco_pc [31:0] $end
$upscope $end
$scope module inst_somador_de_desvio $end
$var wire 1 ! clk $end
$var wire 32 o desvio [31:0] $end
$var wire 32 p endereco_pc [31:0] $end
$var reg 32 q desvio_saida [31:0] $end
$upscope $end
$scope module inst_somador_pc $end
$var wire 1 ! clk $end
$var wire 32 r endereco_pc [31:0] $end
$var reg 32 s proximo_endereco [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b1000 s
b100 r
b10010000010001000 q
b1000 p
b10010000010000000 o
b100 n
b1000 m
b110 l
b110 k
bx j
b1000 i
b10010000010001000 h
b1000 g
b110 f
b110 e
b100100000100000 d
b100100000100000 c
b100000 b
b0 a
b1001 `
b10000 _
b10010 ^
b0 ]
b10000100100100100000100000 \
b10000100100100100000100000 [
b100 Z
bx Y
b110 X
b100100000100000 W
b100100000100000 V
b10010000010000000 U
b100100000100000 T
b10 S
b100100000100000 R
b10 Q
b110 P
b0 O
b110 N
b10000 M
b10010 L
b1001 K
b110 J
b0 I
b10 H
b110 G
b1001 F
b1001 E
b10010 D
b10 C
b0 B
0A
b100100000100000 @
0?
bx >
b100000 =
0<
b1000 ;
b10 :
b0 9
08
07
b110 6
15
b1001 4
b10000 3
b10010 2
b0 1
b0 0
b110 /
0.
1-
b110 ,
b110 +
b10010000010001000 *
b10010000010000000 )
b100100000100000 (
b100 '
b10000100100100100000100000 &
b1000 %
b1001 $
b10 #
0"
0!
$end
#1
b101110 ,
b101110 N
b101110 l
b101110 +
b101110 J
b101110 X
b101110 k
b10100000010000000 )
b10100000010000000 U
b10100000010000000 o
b101110 6
b101110 G
b101110 f
b101110 /
b101110 P
b101110 e
b1010 $
b1010 F
b1010 K
b101000000100000 (
b101000000100000 T
b101000000100000 W
b101000000100000 d
b1100 ;
b1100 i
b1100 m
b10100000010001100 *
b10100000010001100 h
b10100000010001100 q
b10011 2
b10011 D
b10011 L
b10011 ^
b1010 4
b1010 E
b1010 `
b101000000100000 @
b101000000100000 R
b101000000100000 V
b101000000100000 c
b1100 %
b1100 g
b1100 p
b1100 s
b10000100110101000000100000 &
b10000100110101000000100000 [
b10000100110101000000100000 \
b1000 '
b1000 Z
b1000 n
b1000 r
1!
#2
0!
#3
b101 ,
b101 N
b101 l
b101 +
b101 J
b101 X
b101 k
b10000000010001000 )
b10000000010001000 U
b10000000010001000 o
b0 6
b0 G
b0 f
b0 /
b0 P
b0 e
b101 0
b101 I
b101 O
b1000 $
b1000 F
b1000 K
b110 #
b110 H
b110 S
b100000000100010 (
b100000000100010 T
b100000000100010 W
b100000000100010 d
b10001 3
b10001 M
b10001 _
b10000 2
b10000 D
b10000 L
b10000 ^
b1000 4
b1000 E
b1000 `
b100010 =
b100010 b
b100000000100010 @
b100000000100010 R
b100000000100010 V
b100000000100010 c
b10000 ;
b10000 i
b10000 m
b10000000010011000 *
b10000000010011000 h
b10000000010011000 q
b10001100000100000000100010 &
b10001100000100000000100010 [
b10001100000100000000100010 \
b10000 %
b10000 g
b10000 p
b10000 s
b1100 '
b1100 Z
b1100 n
b1100 r
1!
#4
0!
#5
b110 ,
b110 N
b110 l
b110 +
b110 J
b110 X
b110 k
b10010000010001000 )
b10010000010001000 U
b10010000010001000 o
b110 0
b110 I
b110 O
b1001 $
b1001 F
b1001 K
b100100000100010 (
b100100000100010 T
b100100000100010 W
b100100000100010 d
b10100 ;
b10100 i
b10100 m
b10010000010011100 *
b10010000010011100 h
b10010000010011100 q
b10010 3
b10010 M
b10010 _
b1001 4
b1001 E
b1001 `
b100100000100010 @
b100100000100010 R
b100100000100010 V
b100100000100010 c
b10100 %
b10100 g
b10100 p
b10100 s
b10010100000100100000100010 &
b10010100000100100000100010 [
b10010100000100100000100010 \
b10000 '
b10000 Z
b10000 n
b10000 r
1!
#6
0!
#7
b101110 ,
b101110 N
b101110 l
b101110 +
b101110 J
b101110 X
b101110 k
b10100000010001000 )
b10100000010001000 U
b10100000010001000 o
b101110 0
b101110 I
b101110 O
b1010 $
b1010 F
b1010 K
b101000000100010 (
b101000000100010 T
b101000000100010 W
b101000000100010 d
b10011 3
b10011 M
b10011 _
b1010 4
b1010 E
b1010 `
b101000000100010 @
b101000000100010 R
b101000000100010 V
b101000000100010 c
b11000 ;
b11000 i
b11000 m
b10100000010100000 *
b10100000010100000 h
b10100000010100000 q
b10011100000101000000100010 &
b10011100000101000000100010 [
b10011100000101000000100010 \
b11000 %
b11000 g
b11000 p
b11000 s
b10100 '
b10100 Z
b10100 n
b10100 r
1!
#8
0!
#9
bx ,
bx N
bx l
b10 #
b10 H
b10 S
b1111 +
b1111 J
b1111 X
b1111 k
b101000 )
b101000 U
b101000 o
b1010 6
b1010 G
b1010 f
17
1<
18
05
b0 :
b0 C
b0 Q
b101 0
b101 I
b101 O
b10000 $
b10000 F
b10000 K
b1010 (
b1010 T
b1010 W
b1010 d
b11100 ;
b11100 i
b11100 m
b1000100 *
b1000100 h
b1000100 q
b100011 9
b100011 B
b100011 a
b1000 3
b1000 M
b1000 _
b0 4
b0 E
b0 `
b1010 =
b1010 b
b1010 @
b1010 R
b1010 V
b1010 c
b11100 %
b11100 g
b11100 p
b11100 s
b10001101000100000000000000001010 &
b10001101000100000000000000001010 [
b10001101000100000000000000001010 \
b11000 '
b11000 Z
b11000 n
b11000 r
1!
#10
0!
#11
b10000 +
b10000 J
b10000 X
b10000 k
b10001 $
b10001 F
b10001 K
b110 0
b110 I
b110 O
b1001 3
b1001 M
b1001 _
b10001 2
b10001 D
b10001 L
b10001 ^
b100000 ;
b100000 i
b100000 m
b1001000 *
b1001000 h
b1001000 q
b10000 ,
b10000 N
b10000 l
b101 /
b101 P
b101 e
b10001101001100010000000000001010 &
b10001101001100010000000000001010 [
b10001101001100010000000000001010 \
b100000 %
b100000 g
b100000 p
b100000 s
b10000 >
b10000 Y
b10000 j
b11100 '
b11100 Z
b11100 n
b11100 r
1!
#12
0!
#13
b111000 +
b111000 J
b111000 X
b111000 k
b10010 $
b10010 F
b10010 K
b101110 0
b101110 I
b101110 O
b100100 ;
b100100 i
b100100 m
b1001100 *
b1001100 h
b1001100 q
b1010 3
b1010 M
b1010 _
b10010 2
b10010 D
b10010 L
b10010 ^
b100100 %
b100100 g
b100100 p
b100100 s
b10001101010100100000000000001010 &
b10001101010100100000000000001010 [
b10001101010100100000000000001010 \
b110 /
b110 P
b110 e
b10001 ,
b10001 N
b10001 l
b100000 '
b100000 Z
b100000 n
b100000 r
b10001 >
b10001 Y
b10001 j
1!
#14
0!
#15
b101000 ;
b101000 i
b101000 m
b1010000 *
b1010000 h
b1010000 q
bx ,
bx N
bx l
b10001 /
b10001 P
b10001 e
b10001101010100100000000000001010 &
b10001101010100100000000000001010 [
b10001101010100100000000000001010 \
b101000 %
b101000 g
b101000 p
b101000 s
bx >
bx Y
bx j
b100100 '
b100100 Z
b100100 n
b100100 r
1!
#16
0!
#17
b101100 ;
b101100 i
b101100 m
b1010100 *
b1010100 h
b1010100 q
b101100 %
b101100 g
b101100 p
b101100 s
b10001101010100100000000000001010 &
b10001101010100100000000000001010 [
b10001101010100100000000000001010 \
bx /
bx P
bx e
b101000 '
b101000 Z
b101000 n
b101000 r
1!
#18
0!
#19
b110000 ;
b110000 i
b110000 m
b1011000 *
b1011000 h
b1011000 q
b10001101010100100000000000001010 &
b10001101010100100000000000001010 [
b10001101010100100000000000001010 \
b110000 %
b110000 g
b110000 p
b110000 s
b101100 '
b101100 Z
b101100 n
b101100 r
1!
#20
0!
#21
b110100 ;
b110100 i
b110100 m
b1011100 *
b1011100 h
b1011100 q
b110100 %
b110100 g
b110100 p
b110100 s
b10001101010100100000000000001010 &
b10001101010100100000000000001010 [
b10001101010100100000000000001010 \
b110000 '
b110000 Z
b110000 n
b110000 r
1!
#22
0!
#23
b111000 ;
b111000 i
b111000 m
b1100000 *
b1100000 h
b1100000 q
b10001101010100100000000000001010 &
b10001101010100100000000000001010 [
b10001101010100100000000000001010 \
b111000 %
b111000 g
b111000 p
b111000 s
b110100 '
b110100 Z
b110100 n
b110100 r
1!
#24
0!
#25
b111100 ;
b111100 i
b111100 m
b1100100 *
b1100100 h
b1100100 q
b111100 %
b111100 g
b111100 p
b111100 s
b10001101010100100000000000001010 &
b10001101010100100000000000001010 [
b10001101010100100000000000001010 \
b111000 '
b111000 Z
b111000 n
b111000 r
1!
#26
0!
